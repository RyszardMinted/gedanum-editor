//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Systems/Input/VoxelEditorInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @VoxelEditorInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @VoxelEditorInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""VoxelEditorInput"",
    ""maps"": [
        {
            ""name"": ""Editor"",
            ""id"": ""39885907-c59b-4e8e-b2f7-a7f13af2df71"",
            ""actions"": [
                {
                    ""name"": ""CameraPan"",
                    ""type"": ""Value"",
                    ""id"": ""040eafd8-6076-473a-bec3-9f02e45062d2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CameraRotate"",
                    ""type"": ""Value"",
                    ""id"": ""73b75e47-0d9a-4b23-b605-d20d46a5641a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CameraZoom"",
                    ""type"": ""Value"",
                    ""id"": ""92bebe5b-8bea-4e05-8b09-ddb31aba314e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PlaceBlock"",
                    ""type"": ""Button"",
                    ""id"": ""915b2316-8094-4561-8b23-3a226a0e2a81"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RemoveBlock"",
                    ""type"": ""Button"",
                    ""id"": ""bc3a2dee-b657-492d-b5f0-235bf629eab8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""70cb985d-4dfc-4c54-bfc7-e5f640ab7f52"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraPan"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""78f09381-49ce-49ca-9628-2d4fe05bf8a1"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraPan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""6daf7aa4-38da-415e-86c2-769967957666"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraPan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""bc8c8132-ae57-49fc-85e0-62be55c6d92b"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraRotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""8ebf09c0-ba31-47b9-ad7a-69ec3a516659"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""b356f57a-1bc1-4ce6-99c2-5684e039c3d2"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""52be15d4-927b-45f4-a5cd-572a1e8aa993"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlaceBlock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""8022bf2e-c3db-4a23-bfad-74e41cc4965d"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RemoveBlock"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""4c5db633-77d1-4cce-9028-f9f055cd1c5e"",
                    ""path"": ""<Keyboard>/delete"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RemoveBlock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""b337c172-a510-423e-9409-953c2813468f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RemoveBlock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""8778c576-3c31-47c9-a8d7-7d504919ef6b"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraZoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Editor
        m_Editor = asset.FindActionMap("Editor", throwIfNotFound: true);
        m_Editor_CameraPan = m_Editor.FindAction("CameraPan", throwIfNotFound: true);
        m_Editor_CameraRotate = m_Editor.FindAction("CameraRotate", throwIfNotFound: true);
        m_Editor_CameraZoom = m_Editor.FindAction("CameraZoom", throwIfNotFound: true);
        m_Editor_PlaceBlock = m_Editor.FindAction("PlaceBlock", throwIfNotFound: true);
        m_Editor_RemoveBlock = m_Editor.FindAction("RemoveBlock", throwIfNotFound: true);
    }

    ~@VoxelEditorInput()
    {
        UnityEngine.Debug.Assert(!m_Editor.enabled, "This will cause a leak and performance issues, VoxelEditorInput.Editor.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Editor
    private readonly InputActionMap m_Editor;
    private List<IEditorActions> m_EditorActionsCallbackInterfaces = new List<IEditorActions>();
    private readonly InputAction m_Editor_CameraPan;
    private readonly InputAction m_Editor_CameraRotate;
    private readonly InputAction m_Editor_CameraZoom;
    private readonly InputAction m_Editor_PlaceBlock;
    private readonly InputAction m_Editor_RemoveBlock;
    public struct EditorActions
    {
        private @VoxelEditorInput m_Wrapper;
        public EditorActions(@VoxelEditorInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @CameraPan => m_Wrapper.m_Editor_CameraPan;
        public InputAction @CameraRotate => m_Wrapper.m_Editor_CameraRotate;
        public InputAction @CameraZoom => m_Wrapper.m_Editor_CameraZoom;
        public InputAction @PlaceBlock => m_Wrapper.m_Editor_PlaceBlock;
        public InputAction @RemoveBlock => m_Wrapper.m_Editor_RemoveBlock;
        public InputActionMap Get() { return m_Wrapper.m_Editor; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EditorActions set) { return set.Get(); }
        public void AddCallbacks(IEditorActions instance)
        {
            if (instance == null || m_Wrapper.m_EditorActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_EditorActionsCallbackInterfaces.Add(instance);
            @CameraPan.started += instance.OnCameraPan;
            @CameraPan.performed += instance.OnCameraPan;
            @CameraPan.canceled += instance.OnCameraPan;
            @CameraRotate.started += instance.OnCameraRotate;
            @CameraRotate.performed += instance.OnCameraRotate;
            @CameraRotate.canceled += instance.OnCameraRotate;
            @CameraZoom.started += instance.OnCameraZoom;
            @CameraZoom.performed += instance.OnCameraZoom;
            @CameraZoom.canceled += instance.OnCameraZoom;
            @PlaceBlock.started += instance.OnPlaceBlock;
            @PlaceBlock.performed += instance.OnPlaceBlock;
            @PlaceBlock.canceled += instance.OnPlaceBlock;
            @RemoveBlock.started += instance.OnRemoveBlock;
            @RemoveBlock.performed += instance.OnRemoveBlock;
            @RemoveBlock.canceled += instance.OnRemoveBlock;
        }

        private void UnregisterCallbacks(IEditorActions instance)
        {
            @CameraPan.started -= instance.OnCameraPan;
            @CameraPan.performed -= instance.OnCameraPan;
            @CameraPan.canceled -= instance.OnCameraPan;
            @CameraRotate.started -= instance.OnCameraRotate;
            @CameraRotate.performed -= instance.OnCameraRotate;
            @CameraRotate.canceled -= instance.OnCameraRotate;
            @CameraZoom.started -= instance.OnCameraZoom;
            @CameraZoom.performed -= instance.OnCameraZoom;
            @CameraZoom.canceled -= instance.OnCameraZoom;
            @PlaceBlock.started -= instance.OnPlaceBlock;
            @PlaceBlock.performed -= instance.OnPlaceBlock;
            @PlaceBlock.canceled -= instance.OnPlaceBlock;
            @RemoveBlock.started -= instance.OnRemoveBlock;
            @RemoveBlock.performed -= instance.OnRemoveBlock;
            @RemoveBlock.canceled -= instance.OnRemoveBlock;
        }

        public void RemoveCallbacks(IEditorActions instance)
        {
            if (m_Wrapper.m_EditorActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IEditorActions instance)
        {
            foreach (var item in m_Wrapper.m_EditorActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_EditorActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public EditorActions @Editor => new EditorActions(this);
    public interface IEditorActions
    {
        void OnCameraPan(InputAction.CallbackContext context);
        void OnCameraRotate(InputAction.CallbackContext context);
        void OnCameraZoom(InputAction.CallbackContext context);
        void OnPlaceBlock(InputAction.CallbackContext context);
        void OnRemoveBlock(InputAction.CallbackContext context);
    }
}
